{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ETs Laboratory Evaluation Suit","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>labeva<ul> <li>fit</li> <li>func</li> <li>math</li> <li>plot</li> </ul> </li> </ul>"},{"location":"reference/labeva/","title":"labeva","text":""},{"location":"reference/labeva/fit/","title":"fit","text":"<p>Provides common fit models and default parameter sets for lmfit with functions defined in the <code>func</code> module.</p>"},{"location":"reference/labeva/fit/#labeva.fit.exp_decay","title":"<code>exp_decay = lmfit.Model(func.exp_decay)</code>  <code>module-attribute</code>","text":"<p><code>lmfit Model</code> for exponential decay function</p>"},{"location":"reference/labeva/fit/#labeva.fit.exp_decay_params","title":"<code>exp_decay_params = exp_decay.make_params(tau={'value': 15, 'min': 0, 'max': 500}, a={'value': 0.25, 'min': 0, 'max': 5}, b={'value': 0, 'min': -5, 'max': 5})</code>  <code>module-attribute</code>","text":"<p><code>lmfit Parameters</code> for exponential decay function</p>"},{"location":"reference/labeva/fit/#labeva.fit.gauss","title":"<code>gauss = lmfit.Model(func.gauss)</code>  <code>module-attribute</code>","text":"<p><code>lmfit Model</code> for gaussian distribution</p>"},{"location":"reference/labeva/fit/#labeva.fit.gauss_normalized","title":"<code>gauss_normalized = lmfit.Model(func.gauss_normalized)</code>  <code>module-attribute</code>","text":"<p><code>lmfit Model</code> for normalized gaussian distribution</p>"},{"location":"reference/labeva/fit/#labeva.fit.gauss_normalized_params","title":"<code>gauss_normalized_params = gauss_normalized.make_params(mu={'value': 0}, sigma={'value': 1})</code>  <code>module-attribute</code>","text":"<p><code>lmfit Parameters</code> for normalized gaussian distribution</p>"},{"location":"reference/labeva/fit/#labeva.fit.gauss_params","title":"<code>gauss_params = gauss.make_params(mu={'value': 0}, sigma={'value': 1}, a0={'value': 1}, b={'value': 0})</code>  <code>module-attribute</code>","text":"<p><code>lmfit Parameters</code> for gaussian distribution</p>"},{"location":"reference/labeva/fit/#labeva.fit.lin","title":"<code>lin = lmfit.Model(func.lin)</code>  <code>module-attribute</code>","text":"<p><code>lmfit Model</code> for linear function</p>"},{"location":"reference/labeva/fit/#labeva.fit.lin_params","title":"<code>lin_params = lin.make_params(m={'value': 1, 'min': -10, 'max': 10}, b={'value': 0, 'min': -10, 'max': 10})</code>  <code>module-attribute</code>","text":"<p><code>lmfit Parameters</code> for linear function</p>"},{"location":"reference/labeva/func/","title":"func","text":"<p>Provide common functions like a linear function \\(m * x + b\\).</p>"},{"location":"reference/labeva/func/#labeva.func.exp","title":"<code>exp(x, k, a, b)</code>","text":"<p>Exponential function \\( y = a \\times \\exp(k \\times x) + b \\)</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>k</code> <p>grow rate</p> required <code>a</code> <p>Start value</p> required <code>b</code> <p>y-offset</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def exp(x, k, a, b):\n    \"\"\"\n    Exponential function\n    \\\\( y = a \\\\times \\\\exp(k \\\\times x) + b \\\\)\n\n    Args:\n        x: x\n        k: grow rate\n        a: Start value\n        b: y-offset\n    \"\"\"\n    return a * np.exp(k * x) + b\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.exp_decay","title":"<code>exp_decay(t, tau, a, b)</code>","text":"<p>Exponential function \\( y = a \\times \\exp(\\tau \\times t) + b \\)</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <p>t</p> required <code>tau</code> <p>decay time</p> required <code>a</code> <p>Start value</p> required <code>b</code> <p>y-offset</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def exp_decay(t, tau, a, b):\n    \"\"\"\n    Exponential function\n    \\\\( y = a \\\\times \\\\exp(\\\\tau \\\\times t) + b \\\\)\n\n    Args:\n        t: t\n        tau: decay time\n        a: Start value\n        b: y-offset\n    \"\"\"\n    return a * np.exp(-t / tau) + b\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.gauss","title":"<code>gauss(x, x0, std, a0, b)</code>","text":"<p>Gaussian distribution</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>x0</code> <p>expected value \\(\\mu\\)</p> required <code>std</code> <p>standard derivation \\(\\sigma\\)</p> required <code>a0</code> <p>Peak height</p> required <code>b</code> <p>y-offset</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def gauss(x, x0, std, a0, b):\n    \"\"\"\n    Gaussian distribution\n\n    Args:\n        x: x\n        x0: expected value \\\\(\\\\mu\\\\)\n        std: standard derivation \\\\(\\\\sigma\\\\)\n        a0: Peak height\n        b: y-offset\n    \"\"\"\n    return a0 * np.exp(-((x - x0) ** 2) / (2 * std**2)) + b\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.gauss_normalized","title":"<code>gauss_normalized(x, x0, std)</code>","text":"<p>Normalized gaussian distribution</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>x0</code> <p>expected value \\(\\mu\\)</p> required <code>std</code> <p>standard derivation \\(\\sigma\\)</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def gauss_normalized(x, x0, std):\n    \"\"\"\n    Normalized gaussian distribution\n\n    Args:\n        x: x\n        x0: expected value \\\\(\\\\mu\\\\)\n        std: standard derivation \\\\(\\\\sigma\\\\)\n    \"\"\"\n    return gauss(x, x0, std, 1 / (std * np.sqrt(2 * np.pi)), 0)\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.lin","title":"<code>lin(x, m, b)</code>","text":"<p>linear function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>m</code> <p>slope</p> required <code>b</code> <p>y-offset</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def lin(x, m, b):\n    \"\"\"\n    linear function\n\n    Args:\n        x: x\n        m: slope\n        b: y-offset\n    \"\"\"\n    return m * x + b\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.ln","title":"<code>ln(x, tau, a, b)</code>","text":"<p>logarithmic function \\( y = \\tau \\times \\ln\\left(\\frac{x - b}{a}\\right) \\) inverse of exponential function with \\(\\tau = 1/k_{exp}\\)</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>tau</code> <p>stretching factor</p> required <code>a</code> <p>Start value of exp</p> required <code>b</code> <p>y-offset of exp</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def ln(x, tau, a, b):\n    \"\"\"\n    logarithmic function\n    \\\\( y = \\\\tau \\\\times \\\\ln\\\\left(\\\\frac{x - b}{a}\\\\right) \\\\)\n    inverse of exponential function with \\\\(\\\\tau = 1/k_{exp}\\\\)\n\n    Args:\n        x: x\n        tau: stretching factor\n        a: Start value of exp\n        b: y-offset of exp\n    \"\"\"\n    return tau * np.log((x - b) / a)  # tau = 1/k from expfunc\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.polynom","title":"<code>polynom(x, *args)</code>","text":"<p>Polynomial function with arbitrary order \\( y = a_0 x + a_1 x + a_2 x + \\dots \\)</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>*args</code> <p>\\(a_i\\)</p> <code>()</code> Source code in <code>src/labeva/func.py</code> <pre><code>def polynom(x, *args):\n    \"\"\"\n    Polynomial function with arbitrary order\n    \\\\( y = a_0 x + a_1 x + a_2 x + \\\\dots \\\\)\n\n    Args:\n        x: x\n        *args: \\\\(a_i\\\\)\n    \"\"\"\n    return sum([args[i] * x**i for i in range(len(args))])\n</code></pre>"},{"location":"reference/labeva/func/#labeva.func.quad","title":"<code>quad(x, a, x0, y0)</code>","text":"<p>Parabel function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>x</p> required <code>a</code> <p>stretching factor</p> required <code>x0</code> <p>x-offset</p> required <code>y0</code> <p>y-offset</p> required Source code in <code>src/labeva/func.py</code> <pre><code>def quad(x, a, x0, y0):\n    \"\"\"\n    Parabel function\n\n    Args:\n        x: x\n        a: stretching factor\n        x0: x-offset\n        y0: y-offset\n    \"\"\"\n    return a * (x - x0) ** 2 + y0\n</code></pre>"},{"location":"reference/labeva/math/","title":"math","text":"<p>Tools for processing math data. Either numerical result, some kind of numpy object or rendered string.</p>"},{"location":"reference/labeva/math/#labeva.math.average","title":"<code>average(series)</code>","text":"<p>calculate average and standard error of average</p> <p>Parameters:</p> Name Type Description Default <code>series</code> <p>Series of values</p> required <p>Returns:</p> Type Description <code>(float, float)</code> <p>average, standard error of average</p> Source code in <code>src/labeva/math.py</code> <pre><code>def average(series) -&gt; (float, float):\n    \"\"\"\n    calculate average and standard error of average\n\n    Args:\n        series: Series of values\n\n    Returns:\n        average, standard error of average\n    \"\"\"\n    return np.average(series), np.std(series, ddof=1) / np.sqrt(len(series))\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.chisquare","title":"<code>chisquare(y_exp, y_obs, y_obs_error)</code>","text":"<p>calculate chi square value: (y_expected - y_observed)^2 / delta_y_observed^2</p> <p>Parameters:</p> Name Type Description Default <code>y_exp</code> <p>expected y-values</p> required <code>y_obs</code> <p>observed y-values</p> required <code>y_obs_error</code> <p>uncertainties of observed y-values</p> required <p>Returns:</p> Type Description <code>float</code> <p>chi square value</p> Source code in <code>src/labeva/math.py</code> <pre><code>def chisquare(y_exp, y_obs, y_obs_error) -&gt; float:\n    \"\"\"\n    calculate chi square value: (y_expected - y_observed)^2 / delta_y_observed^2\n\n    Args:\n        y_exp: expected y-values\n        y_obs: observed y-values\n        y_obs_error: uncertainties of observed y-values\n\n    Returns:\n        chi square value\n    \"\"\"\n    return sum(\n        [\n            (y_e - y) ** 2 / dy**2\n            for y_e, y, dy in zip(y_exp, y_obs, y_obs_error, strict=True)\n        ]\n    )\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.error_str","title":"<code>error_str(value, error, frmt='plain', unit=None)</code>","text":"<p>render value with uncertainty in string with right amount of decimal numbers in magnitude of value</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>value</p> required <code>error</code> <code>float</code> <p>uncertainty of value</p> required <code>frmt</code> <code>str</code> <p>format <code>plain</code>, <code>tex</code> or <code>si</code></p> <code>'plain'</code> <code>unit</code> <code>str | None</code> <p>print unit behind value</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>(value +- error)(e+-mag)</p> Source code in <code>src/labeva/math.py</code> <pre><code>def error_str(value: float, error: float, frmt: str = \"plain\", unit: str | None = None) -&gt; str:\n    \"\"\"\n    render value with uncertainty in string with right amount of decimal numbers in magnitude of value\n\n    Args:\n        value: value\n        error: uncertainty of value\n        frmt: format `plain`, `tex` or `si`\n        unit: print unit behind value\n\n    Returns:\n        (value +- error)(e+-mag)\n    \"\"\"\n    # todo implement siunitx format\n    if magnitude(error) &gt; magnitude(value):\n        return \"\"\n    mag_val = magnitude(value)\n    mag_err = magnitude(error)\n    decimals = mag_val - mag_err + 1\n    val = value / 10.0**mag_val\n    err = error / 10.0**mag_val\n\n    if frmt == \"si\":  # TeX siunitx format\n        return f\"\\\\SI{{ {val} \\\\pm {err} e{mag_val} }}{{}}\"\n\n    string = \"(\" if (mag_val != 0) or (unit is not None) else \"\"\n    string += f\"{val:.{decimals}f} \"\n    string += r\"\\pm\" if frmt == \"tex\" else \"+-\"\n    string += f\" {err:.{decimals}f}\"\n    string += \")\" if mag_val != 0 or (unit is not None) else \"\"\n    if (mag_val != 0) and (frmt == \"tex\"):\n        string += f\"10^{{{mag_val}}}\"\n    elif mag_val != 0:\n        string += f\"e{mag_val}\"\n    if unit is not None:\n        string += ' ' + unit\n    return string\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.gaussian_fwhm","title":"<code>gaussian_fwhm(std, d_std)</code>","text":"<p>Calculate full width at half maximum of a gaussian.</p> <p>Parameters:</p> Name Type Description Default <code>std</code> <code>float</code> <p>standard derivation \\(\\sigma\\)</p> required <code>d_std</code> <code>float</code> <p>error of standard derivation</p> required <p>Returns:</p> Type Description <code>(float, float)</code> <p>FWHM of gaussian</p> Source code in <code>src/labeva/math.py</code> <pre><code>def gaussian_fwhm(std: float, d_std: float) -&gt; (float, float):\n    \"\"\"\n    Calculate full width at half maximum of a gaussian.\n\n    Args:\n        std: standard derivation \\\\(\\\\sigma\\\\)\n        d_std: error of standard derivation\n\n    Returns:\n        FWHM of gaussian\n    \"\"\"\n    return 2 * np.sqrt(2 * np.log(2)) * std, 2 * np.sqrt(2 * np.log(2)) * d_std\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.ls_minmax","title":"<code>ls_minmax(data, num=1000)</code>","text":"<p>returns linear spaced samples in the interval [min(data), max(data)] with length num=1000</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>series of data to gain min and max values</p> required <code>num</code> <code>int</code> <p>number of samples</p> <code>1000</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>linear spaced samples</p> Source code in <code>src/labeva/math.py</code> <pre><code>def ls_minmax(data, num: int = 1000) -&gt; np.ndarray:\n    \"\"\"\n    returns linear spaced samples in the interval [min(data), max(data)] with length num=1000\n\n    Args:\n        data: series of data to gain min and max values\n        num: number of samples\n\n    Returns:\n        linear spaced samples\n    \"\"\"\n    return np.linspace(np.min(data), np.max(data), num)\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.magnitude","title":"<code>magnitude(x)</code>","text":"<p>calculate magnitude of given value</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>value</p> required <p>Returns:</p> Type Description <code>int</code> <p>Orders of magnitude in decimal system</p> Source code in <code>src/labeva/math.py</code> <pre><code>def magnitude(x: float) -&gt; int:\n    \"\"\"\n    calculate magnitude of given value\n\n    Args:\n        x (float): value\n\n    Returns:\n        Orders of magnitude in decimal system\n    \"\"\"\n    return np.choose(\n        x == 0,  # bool values, used as indices to the array\n        [\n            np.int_(np.log10(np.abs(x)) // 1),  # if false\n            0,  # if true\n        ],\n    )\n</code></pre>"},{"location":"reference/labeva/plot/","title":"plot","text":"<p>Apply settings to matplotlib</p>"},{"location":"reference/labeva/plot/#labeva.plot.FASTRUN","title":"<code>FASTRUN = False</code>  <code>module-attribute</code>","text":"<p>Can be used to check whether to take smaller data sets to test code faster</p>"},{"location":"reference/labeva/plot/#labeva.plot.FIGURE_COLOR","title":"<code>FIGURE_COLOR = 'tab:blue'</code>  <code>module-attribute</code>","text":"<p>Default color</p>"},{"location":"reference/labeva/plot/#labeva.plot.FIGURE_DIR","title":"<code>FIGURE_DIR = path.join(FIGURE_DIR_SUBDIR, f'{FIGURE_DIR_TIME.strftime('%Y-%m-%dT%H-%M-%S')}')</code>  <code>module-attribute</code>","text":"<p>Directory to save figures used by <code>figure_save()</code></p>"},{"location":"reference/labeva/plot/#labeva.plot.FIGURE_DIR_SUBDIR","title":"<code>FIGURE_DIR_SUBDIR = 'fig'</code>  <code>module-attribute</code>","text":"<p>Subdirectory of working directory to save figures in + timestamp (if not overwritten)</p>"},{"location":"reference/labeva/plot/#labeva.plot.FIGURE_DIR_TIME","title":"<code>FIGURE_DIR_TIME = datetime.now()</code>  <code>module-attribute</code>","text":"<p>Defaults to <code>datetime.now()</code></p>"},{"location":"reference/labeva/plot/#labeva.plot.FIGURE_SAVE","title":"<code>FIGURE_SAVE = True</code>  <code>module-attribute</code>","text":"<p>Whether <code>figure_save()</code> saves the figures</p>"},{"location":"reference/labeva/plot/#labeva.plot.MPL_COLORS_TAB","title":"<code>MPL_COLORS_TAB = ['tab:blue', 'tab:green', 'tab:orange', 'tab:red', 'tab:purple', 'tab:pink', 'tab:olive', 'tab:cyan', 'tab:gray', 'tab:brown']</code>  <code>module-attribute</code>","text":"<p>Set of MPL 'tab:' colors</p>"},{"location":"reference/labeva/plot/#labeva.plot.PLOTTING","title":"<code>PLOTTING = True</code>  <code>module-attribute</code>","text":"<p>Enabe or disable plotting. to be used like <code>if PLOTTING: ...</code></p>"},{"location":"reference/labeva/plot/#labeva.plot.save_figure","title":"<code>save_figure = figure_save</code>  <code>module-attribute</code>","text":"<p>aliase for <code>figure_save()</code>. legacy support, to be removed in a later version</p>"},{"location":"reference/labeva/plot/#labeva.plot.args_err","title":"<code>args_err(*, ls='', marker='.', mec='k', ms=7, ecolor='k', elinewidth=2, capsize=5, capthick=2, **kwargs)</code>","text":"<p>Provides (default) parameters for <code>plt.errorbar</code>. Can be used like <pre><code>plt.errorbar(xdata, ydata, xerr=xerr, yerr=yerr, **args_err())\n</code></pre> If <code>None</code> is given, no value is set.</p> <p>Parameters:</p> Name Type Description Default <code>ls</code> <code>str</code> <p>line style</p> <code>''</code> <code>marker</code> <code>str</code> <p>marker style</p> <code>'.'</code> <code>mec</code> <code>str</code> <p>marker edge color</p> <code>'k'</code> <code>ms</code> <code>int</code> <p>marker size</p> <code>7</code> <code>ecolor</code> <code>str</code> <p>error bar color</p> <code>'k'</code> <code>elinewidth</code> <code>int</code> <p>error bar line width</p> <code>2</code> <code>capsize</code> <code>int</code> <p>error bar cap size</p> <code>5</code> <code>capthick</code> <code>int</code> <p>error bar cap thickness</p> <code>2</code> <code>**kwargs</code> <code>str | int</code> <p>other valid <code>plt.errorbar</code> parameters can be provided</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, str | int]</code> <p>Dictionary with parameters</p> Source code in <code>src/labeva/plot.py</code> <pre><code>def args_err(\n    *,\n    ls: str = \"\",\n    marker: str = \".\",\n    mec: str = \"k\",\n    ms: int = 7,\n    ecolor: str = \"k\",\n    elinewidth: int = 2,\n    capsize: int = 5,\n    capthick: int = 2,\n    **kwargs: str | int,\n) -&gt; dict[str, str | int]:\n    \"\"\"\n    Provides (default) parameters for `plt.errorbar`. Can be used like\n    ```python\n    plt.errorbar(xdata, ydata, xerr=xerr, yerr=yerr, **args_err())\n    ```\n    If `None` is given, no value is set.\n\n    Args:\n        ls: line style\n        marker: marker style\n        mec: marker edge color\n        ms: marker size\n        ecolor: error bar color\n        elinewidth: error bar line width\n        capsize: error bar cap size\n        capthick: error bar cap thickness\n        **kwargs: other valid `plt.errorbar` parameters can be provided\n\n    Returns:\n        Dictionary with parameters\n    \"\"\"\n    dct = {}\n    for key, value in locals().items():\n        if value is not None:\n            dct[key] = value\n    dct.update(dct[\"kwargs\"])\n    del dct[\"dct\"], dct[\"kwargs\"]\n    return dct\n</code></pre>"},{"location":"reference/labeva/plot/#labeva.plot.figure_save","title":"<code>figure_save(figure_name, fileformat, **kwargs)</code>","text":"<p>saves the current matplotlib figure to a file</p> <p>Parameters:</p> Name Type Description Default <code>figure_name</code> <code>str</code> <p>File name</p> required <code>**kwargs</code> <p>Additional keyword arguments passed to <code>pyplot.savefig()</code></p> <code>{}</code> Source code in <code>src/labeva/plot.py</code> <pre><code>def figure_save(figure_name: str, fileformat: str | None, **kwargs) -&gt; None:\n    \"\"\"\n    saves the current matplotlib figure to a file\n\n    Args:\n        figure_name: File name\n        **kwargs: Additional keyword arguments passed to `pyplot.savefig()`\n    \"\"\"\n    dirname = FIGURE_DIR\n    if fileformat is None:\n        fileformat = mpl.rcParams[\"savefig.format\"]\n    if FIGURE_SAVE and not FASTRUN:\n        if not path.isdir(dirname):\n            makedirs(dirname)\n        return plt.savefig(\n            path.join(\n                dirname, figure_name + \".\" + fileformat\n            ),\n            **kwargs,\n        )\n</code></pre>"},{"location":"reference/labeva/plot/#labeva.plot.plt_setup","title":"<code>plt_setup(plotting=None, size=None, dpi=None, save=None, dirname=None, dir_subdir=None, dir_time=None, fastrun=None)</code>","text":"<p>Sets up default matplotlib settings and changes by the module provided constants</p> <p>Parameters:</p> Name Type Description Default <code>plotting</code> <code>bool</code> <p>whether to compute plots</p> <code>None</code> <code>size</code> <code>(int, int)</code> <p>Size of mpl figures</p> <code>None</code> <code>dpi</code> <code>int</code> <p>DPI of mpl figures</p> <code>None</code> <code>save</code> <code>bool</code> <p>whether to save mpl figures (effects <code>figure_save</code>)</p> <code>None</code> <code>dirname</code> <code>str</code> <p>Directory to save image files to</p> <code>None</code> <code>dir_subdir</code> <code>str</code> <p>Compute directory to save image files to with subdirectory name and timestamp (no effect if <code>dirname</code> is given)</p> <code>None</code> <code>dir_time</code> <code>str</code> <code>None</code> <code>fastrun</code> <code>bool</code> <code>None</code> Source code in <code>src/labeva/plot.py</code> <pre><code>def plt_setup(\n    plotting: bool = None,\n    size: (int, int) = None,\n    dpi: int = None,\n    save: bool = None,\n    dirname: str = None,\n    dir_subdir: str = None,\n    dir_time: str = None,\n    fastrun: bool = None,\n):\n    \"\"\"\n    Sets up default matplotlib settings and changes by the module provided constants\n\n    Args:\n        plotting: whether to compute plots\n        size: Size of mpl figures\n        dpi: DPI of mpl figures\n        save: whether to save mpl figures (effects `figure_save`)\n        dirname: Directory to save image files to\n        dir_subdir: Compute directory to save image files to with subdirectory name and timestamp (no effect if `dirname` is given)\n        dir_time:\n        fastrun:\n    \"\"\"\n    global PLOTTING\n    global FIGURE_SAVE\n    global FASTRUN\n    global FIGURE_SAVE\n    global FIGURE_DIR\n    global FIGURE_DIR_SUBDIR\n    global FIGURE_DIR_TIME\n\n    if plotting is not None:\n        PLOTTING = plotting\n    if fastrun is not None:\n        FASTRUN = fastrun\n\n    if save is not None:\n        FIGURE_SAVE = save\n\n    if dir_subdir is not None:\n        FIGURE_DIR_SUBDIR = dir_subdir\n    if dir_time is not None:\n        FIGURE_DIR_TIME = dir_time\n\n    if dirname is not None:\n        FIGURE_DIR = dirname\n    elif dir_subdir is not None:\n        FIGURE_DIR = path.join(\n            FIGURE_DIR_SUBDIR, f\"{FIGURE_DIR_TIME.strftime('%Y-%m-%dT%H-%M-%S')}\"\n        )\n    else:\n        pass\n\n    mpl.rcParams[\"figure.figsize\"] = size\n    mpl.rcParams[\"figure.dpi\"] = dpi\n</code></pre>"}]}