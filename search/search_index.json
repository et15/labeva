{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>labeva<ul> <li>__version__</li> <li>fit</li> <li>func</li> <li>math</li> <li>plot</li> </ul> </li> </ul>"},{"location":"reference/labeva/","title":"labeva","text":""},{"location":"reference/labeva/__version__/","title":"__version__","text":""},{"location":"reference/labeva/fit/","title":"fit","text":""},{"location":"reference/labeva/func/","title":"func","text":""},{"location":"reference/labeva/math/","title":"math","text":""},{"location":"reference/labeva/math/#labeva.math.average","title":"<code>average(series)</code>","text":"<p>calculate average and standard error of average</p> <p>:param series: Series of values :return: average, standard error of average</p> Source code in <code>src/labeva/math.py</code> <pre><code>def average(series) -&gt; (float, float):\n\"\"\"\n    calculate average and standard error of average\n    :param series: Series of values\n    :return: average, standard error of average\n    \"\"\"\nreturn np.average(series), np.std(series, ddof=1) / np.sqrt(len(series))\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.chisquare","title":"<code>chisquare(y_exp, y_obs, y_obs_error)</code>","text":"<p>calculate chi square value: (y_expected - y_observed)^2 / delta_y_observed^2</p> <p>:param y_exp: expected y-values :param y_obs: observed y-values :param y_obs_error: uncertainties of observed y-values</p> <p>:return: chi square value</p> Source code in <code>src/labeva/math.py</code> <pre><code>def chisquare(y_exp, y_obs, y_obs_error) -&gt; float:\n\"\"\"\n    calculate chi square value: (y_expected - y_observed)^2 / delta_y_observed^2\n    :param y_exp: expected y-values\n    :param y_obs: observed y-values\n    :param y_obs_error: uncertainties of observed y-values\n    :return: chi square value\n    \"\"\"\nreturn sum(\n[\n(y_e - y) ** 2 / dy**2\nfor y_e, y, dy in zip(y_exp, y_obs, y_obs_error, strict=True)\n]\n)\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.error_str","title":"<code>error_str(value, error, frmt='plain', unit=None)</code>","text":"<p>render value with uncertainty in string with right amount of decimal numbers in magnitude of value</p> <p>:param value: value :param error: uncertainty of value :param frmt: format <code>plain</code>, <code>tex</code> or <code>si</code> :param unit: print unit behind value</p> <p>:return: (value +- error)(e+-mag)</p> Source code in <code>src/labeva/math.py</code> <pre><code>def error_str(value: float, error: float, frmt=\"plain\", unit=None) -&gt; str:\n\"\"\"\n    render value with uncertainty in string with right amount of decimal numbers in magnitude of value\n    :param value: value\n    :param error: uncertainty of value\n    :param frmt: format `plain`, `tex` or `si`\n    :param unit: print unit behind value\n    :return: (value +- error)(e+-mag)\n    \"\"\"\n# todo implement siunitx format\nif magnitude(error) &gt; magnitude(value):\nreturn \"\"\nmag_val = magnitude(value)\nmag_err = magnitude(error)\ndecimals = mag_val - mag_err + 1\nval = value / 10.0**mag_val\nerr = error / 10.0**mag_val\nif frmt == \"si\":  # TeX siunitx format\nreturn f\"\\\\SI{{ {val} \\\\pm {err} e{mag_val} }}{{}}\"\nstring = \"(\" if (mag_val != 0) or (unit is not None) else \"\"\nstring += f\"{val:.{decimals}f} \"\nstring += r\"\\pm\" if frmt == \"tex\" else \"+-\"\nstring += f\" {err:.{decimals}f}\"\nstring += \")\" if mag_val != 0 or (unit is not None) else \"\"\nif (mag_val != 0) and (frmt == \"tex\"):\nstring += f\"10^{{{mag_val}}}\"\nelif mag_val != 0:\nstring += f\"e{mag_val}\"\nreturn string\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.ls_minmax","title":"<code>ls_minmax(data, num=1000)</code>","text":"<p>returns linear spaced samples in the interval [min(data), max(data)] with length num=1000</p> <p>:param data: series of data to gain min and max values :param num: number of samples</p> <p>:return: linear spaced samples</p> Source code in <code>src/labeva/math.py</code> <pre><code>def ls_minmax(data, num: int = 1000) -&gt; np.ndarray:\n\"\"\"\n    returns linear spaced samples in the interval [min(data), max(data)] with length num=1000\n    :param data: series of data to gain min and max values\n    :param num: number of samples\n    :return: linear spaced samples\n    \"\"\"\nreturn np.linspace(np.min(data), np.max(data), num)\n</code></pre>"},{"location":"reference/labeva/math/#labeva.math.magnitude","title":"<code>magnitude(x)</code>","text":"<p>calculate magnitude of given value</p> <p>:param x: value</p> <p>:return: magnitude</p> Source code in <code>src/labeva/math.py</code> <pre><code>def magnitude(x: float) -&gt; int:\n\"\"\"\n    calculate magnitude of given value\n    :param x: value\n    :return: magnitude\n    \"\"\"\nreturn np.choose(\nx == 0,  # bool values, used as indices to the array\n[\nnp.int_(np.log10(np.abs(x)) // 1),  # if false\n0,  # if true\n]\n)\n</code></pre>"},{"location":"reference/labeva/plot/","title":"plot","text":""}]}